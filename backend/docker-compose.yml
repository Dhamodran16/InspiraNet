version: '3.8'

services:
  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"      # HTTP API
      - "8080:8080"      # WebSocket
      - "40000-49999:40000-49999/udp"  # MediaSoup ports
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/virtual_meeting
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - SERVER_IP=backend
      - REDIS_URL=redis://redis:6379
      - TURN_URL=turn:turn-server:3478
      - TURN_USERNAME=mediasoup
      - TURN_PASSWORD=mediasoup123
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped
    networks:
      - meeting-network

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=virtual_meeting
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - meeting-network

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - meeting-network
    command: redis-server --appendonly yes

  # TURN Server for NAT Traversal
  turn-server:
    image: coturn/coturn:latest
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "5349:5349"
      - "5349:5349/udp"
    environment:
      - REALM=localhost
      - USER=mediasoup:mediasoup123
      - CLI_PASSWORD=turn123
    command: |
      turnserver
      --realm=localhost
      --user=mediasoup:mediasoup123
      --cli-password=turn123
      --listening-port=3478
      --tls-listening-port=5349
      --listening-ip=0.0.0.0
      --external-ip=your-server-ip
      --verbose
    restart: unless-stopped
    networks:
      - meeting-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - meeting-network

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - meeting-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - meeting-network

volumes:
  mongodb_data:
  redis_data:
  grafana_data:

networks:
  meeting-network:
    driver: bridge
